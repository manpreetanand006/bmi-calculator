import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import os

def bmi_cal(result_label=None):
    name = usernameentry.get()
    age = agecombo.get()
    try:
        weight = float(weightcombo.get())
        height_feet = float(feetcombo.get())
        height_inches = float(inchescombo.get())
    except Exception:
        messagebox.showerror("Input Error", "Please enter valid numeric values for weight and height.")
        return

    if not name.strip():
        messagebox.showwarning("Input Error", "Name should not be empty")
        return

    if not age:
        messagebox.showwarning("Input Error", "Please select an age")
        return

    height_meters = (height_feet * 0.3048) + (height_inches * 0.0254)
    bmi = round(weight / (height_meters ** 2), 2)

    def bmi_category(bmi):
        if bmi < 18.5:
            category = "Underweight"
        elif 18.5 <= bmi < 24.9:
            category = "Normal"
        elif 25 <= bmi < 29.9:
            category = "Overweight"
        else:
            category = "Obese"
        return category

    category = bmi_category(bmi)

    with open('user_bmi.txt', 'a') as user_bmi:
        user_bmi.write(
            f'Name: {name}  Age: {age}  Weight(Kg): {weight}  Height(feet/inches): {height_feet} {height_inches}\n\tBMI: {bmi} ({category})\n'
        )

    result_label.config(
        text=f"Name: {name}\nAge: {age}\nWeight: {weight} Kg\nHeight: {height_feet} feet {height_inches} inches\nBMI: {bmi} ({category})"
    )

def show_graph():
    if not os.path.exists('user_bmi.txt'):
        messagebox.showwarning("Data Error", "No BMI data found to plot.")
        return

    categories = {"Underweight": 0, "Normal": 0, "Overweight": 0, "Obese": 0}

    with open('user_bmi.txt', 'r') as user_bmi:
        for line in user_bmi:
            if "Underweight" in line:
                categories["Underweight"] += 1
            elif "Normal" in line:
                categories["Normal"] += 1
            elif "Overweight" in line:
                categories["Overweight"] += 1
            elif "Obese" in line:
                categories["Obese"] += 1

    labels = categories.keys()
    sizes = categories.values()
